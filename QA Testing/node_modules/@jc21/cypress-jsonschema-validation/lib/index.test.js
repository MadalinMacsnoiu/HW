"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const schemaObject = {
    type: 'object',
    additionalProperties: false,
    properties: {
        result: {
            type: 'object',
            additionalProperties: false,
            required: [
                'commit',
                'healthy',
                'checks'
            ],
            properties: {
                commit: {
                    type: 'string',
                    description: 'Commit hash',
                    example: '88cb49b8f8d4d9ce7c4825aa13410b849bf99878',
                    minLength: 8
                },
                healthy: {
                    type: 'boolean',
                    description: 'Healthy?',
                    example: true
                },
                checks: {
                    type: 'object',
                    description: 'Checks to determine health',
                    additionalProperties: false,
                    required: [
                        'databases'
                    ],
                    properties: {
                        databases: {
                            type: 'object',
                            description: 'Databases are reachable'
                        }
                    }
                }
            }
        },
        error: {
            type: 'object',
            description: 'Error object',
            additionalProperties: false,
            required: [
                'code',
                'message'
            ],
            properties: {
                code: {
                    type: 'integer',
                    description: 'Error code',
                    minimum: 0
                },
                message: {
                    type: 'string',
                    description: 'Error message'
                }
            }
        }
    }
};
test('test schema file', () => __awaiter(void 0, void 0, void 0, function* () {
    const sv = index_1.JsonSchemaValidation();
    const result = yield sv.validateJsonSchema({
        schemaFile: './testing/schema-1.json',
        data: {
            result: {
                checks: {
                    databases: {
                        healthy: true
                    }
                },
                commit: '88cb49b8f8d4d9ce7c48',
                healthy: true
            }
        },
        verbose: true,
    });
    expect(result).toBe(null);
}));
test('test schema file Invalid', () => __awaiter(void 0, void 0, void 0, function* () {
    const sv = index_1.JsonSchemaValidation();
    const result = yield sv.validateJsonSchema({
        schemaFile: './testing/schema-1.json',
        data: {
            result: {
                checks: {
                    databases: {
                        healthy: true
                    }
                },
                healthy: true
            }
        },
        verbose: true,
    });
    expect(typeof result).toBe('string');
    expect(result).toBe('data.result should have required property \'commit\'');
}));
test('test schema object', () => __awaiter(void 0, void 0, void 0, function* () {
    const sv = index_1.JsonSchemaValidation();
    const result = yield sv.validateJsonSchema({
        schema: schemaObject,
        data: {
            result: {
                checks: {
                    databases: {
                        healthy: true
                    }
                },
                commit: '88cb49b8f8d4d9ce7c48',
                healthy: true
            }
        },
        verbose: true,
    });
    expect(result).toBe(null);
}));
test('test schema object Invalid', () => __awaiter(void 0, void 0, void 0, function* () {
    const sv = index_1.JsonSchemaValidation();
    const result = yield sv.validateJsonSchema({
        schema: schemaObject,
        data: {
            result: {
                checks: {
                    databases: {
                        healthy: true
                    }
                },
                healthy: true
            }
        },
        verbose: true,
    });
    expect(typeof result).toBe('string');
    expect(result).toBe('data.result should have required property \'commit\'');
}));
//# sourceMappingURL=index.test.js.map