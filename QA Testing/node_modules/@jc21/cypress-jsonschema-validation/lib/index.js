"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonSchemaValidation = void 0;
const Parser = require("json-schema-ref-parser");
const logger_1 = require("./logger");
const defaultLog = new logger_1.default('cypress-jsonschema-validation');
function JsonSchemaValidation() {
    defaultLog.success('Plugin Loaded');
    return {
        /**
         * @param   {object}        options
         * @param   {object}        options.data
         * @param   {string}        [options.schemaFile]
         * @param   {object}        [options.schema]
         * @param   {boolean}       [options.verbose]
         * @returns {string|null}   Errors or null if OK
         */
        validateJsonSchema: (options) => __awaiter(this, void 0, void 0, function* () {
            const log = new logger_1.default('validateJsonSchema');
            if (!options.schemaFile && !options.schema) {
                return new Error('Neither `schemaFile` or `schema` was specified');
            }
            if (options.schemaFile && options.schema) {
                return new Error('You must only define `schemaFile` or `schema` not both');
            }
            if (!options.data) {
                return new Error('`data` to validate was not specified');
            }
            const verbose = options.verbose || false;
            if (options.schemaFile) {
                options.schema = yield Parser.dereference(options.schemaFile);
            }
            // Now validate the endpoint schema against the response
            const Ajv = require('ajv')({
                allErrors: true,
                format: 'full',
                nullable: true,
                verbose: true,
            });
            if (verbose) {
                log.debug('Schema:', JSON.stringify(options.schema, null, 2));
                log.debug('Data:', JSON.stringify(options.data, null, 2));
            }
            const valid = Ajv.validate(options.schema, options.data);
            if (valid && !Ajv.errors) {
                if (verbose) {
                    log.success('Validation Success');
                }
                return null;
            }
            else {
                log.error(Ajv.errorsText());
                return Ajv.errorsText();
            }
        })
    };
}
exports.JsonSchemaValidation = JsonSchemaValidation;
//# sourceMappingURL=index.js.map